Program ::= Expression | Program Expression

LineEnder ::= "\n" | "}"

Expression ::= Procedure LineEnder | Assignment LineEnder | FuncCall LineEnder

Procedure ::= PrintProc | MakeProc | WhenProc | ...

PrintProc ::= "print" StackExpr
MakeProc  ::= "make" Assignment | "make" TargetArg
FreeProc ::= "free" WORD
ReplaceProc ::= "replace" WORD "=" StackExpr | "replace" WORD "with" StackExpr
UseProc ::= "use" StringLiteral "with" WORD
LoopProc ::= "loop" StackExpr Block | "loop" StackExpr "with" WORD Block
WhenProc ::= "when" StackExpr Block | "when" StackExpr Block ElseProc
ElseProc ::= "else" Block | "else" WhenProc
WhenLoopProc ::= "when" StackExpr "loop" Block | "when" StackExpr "loop" Block ElseProc
NextProc ::= "next"
ExitProc ::= "exit" | "exit" StackExpr
FlagProc ::= "flag" StackExpr
FuncProc ::= "def" (optional : Helper) WORD "with" InputList Block | "def" WORD "=>" InputList Block

Helper ::= "$"WORD

InputList ::= WORD | InputList WORD

Block ::= "{" Program "}"

StackExpr ::= StackElement | StackExpr StackElement

StackElement ::= StackCall | Literal | StackOp | FuncCall

FuncCall ::= WORD"(" StackExpr ")" | WORD"(" Iterator ")"

Iterator ::= "@"WORD

StackCall ::= WORD | WORD PropertyList

PropertyList ::= Property | PropertyList Property

Property ::= Property ::= "." WORD | "." FuncCall | "[" " " StackExpr "]"

Literal ::= NumericLiteral | StringLiteral

NumericLiteral ::= NUMBER
StringLiteral  ::= STRING

StackOp ::= "dup" | "drop" | "swap" | "rot<" | "rot>" | ...

Assignment ::= TargetArg AssignmentSymbol StackExpr | TargetArg AssignmentSymbol Block

TargetArg ::= StackCall

AssignmentSymbol ::= "=" | "+=" | "-=" | "*=" | "/="