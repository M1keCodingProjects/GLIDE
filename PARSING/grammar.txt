Program      ::= ( Expression )*

LineEnder    ::= "\n" | "}"

Expression   ::= ( Procedure | Assignment | FuncCall | Helper ) LineEnder

Procedure    ::= PrintProc | MakeProc | WhenProc | ...

PrintProc    ::= "print" StackExpr ( "with" STRING )?

MakeProc     ::= "make" ( Helper )? Assignment

FreeProc     ::= "free" WORD

ReplaceProc  ::= "replace" WORD ( "=" | "with" ) StackExpr

UseProc      ::= "use" STRING "with" WORD

LoopProc     ::= "loop" StackExpr ( "with" Assignment )? Block

WhenProc     ::= "when" StackExpr ( "loop" )? Block ( ElseProc )?

ElseProc     ::= "else" ( Block | WhenProc )

NextProc     ::= "next"

ExitProc     ::= "exit" ( StackExpr )?

FuncProc     ::= "def" ( Helper )? WORD ( ( "with" | "=>" ) InputList )? Block

MatchProc   ::= "match" StackExpr Block

Helper       ::= "$"WORD

InputList    ::= WORD*

Block        ::= "{" Program "}"

StackExpr    ::= StackElement*

StackElement ::= StackCall | Literal | StackOp | FuncCall

FuncCall     ::= ( StackCall "." )? WORD"(" ( StackExpr | Iterator )? ")"

Iterator     ::= "@"WORD

StackCall    ::= WORD ( PropertyList )?

PropertyList ::= Property*

Property     ::= "."( WORD | FuncCall ) | "[" StackExpr "]"

Literal      ::= NUMBER | STRING

StackOp      ::= "dup" | "drop" | "swap" | "rot<" | "rot>" | ...

Assignment   ::= TargetArg ( ASSIGN ( StackExpr | Block ) )?

TargetArg    ::= StackCall

ASSIGN       ::= ( "+" | "-" | "*" | "/" | "%" )?"="