## THIS IS THE BASIC GAMELANG UTILITIES MODULE ##
use "basic stack ops" with bso

def typecheck => el typ msg {
  make elType = el type
  when elType typ != { flag msg " expected " typ " but got " elType " instead." str }
  exit el
}

def add => el1 el2 { # this is a type friendly function that supports many behaviours for addition
  when el1 type "list" == {
    when el2 type "list" == { exit el1 spill el2 spill }
    exit el1 spill el2
  }
  when el2 type "list" == { exit el1 el2 spill }
  exit el1 el2 +
}

def mult => f1 f2 { # this is a type friendly function, repeating f2 times any f1 input
  typecheck( f2 "number" "mult function" )
  make _f1 = f1
  when f1 type "list" == {
    _f1 = _f1 spill #dereference
    loop f2 1 - { f1 = f1 spill _f1 spill }
  } else {
    loop f2 1 - { f1 += _f1 }
  }
  exit f1
}

def random => from to {
  exit rangeList( from 1 to ) rand pop
}

def ? => condition eval altEval {
  when condition { exit eval } else { exit altEval }
}