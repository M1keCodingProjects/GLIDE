# Hi! this is an Integrated Development Environment for GameLang, aka GLIDE
# press the button on the left to Build & Run your code, or the one on the right to print it to the console!
# the one below is a quick example showcasing a game of "tic tac toe" made in GameLang:

use "std GList" with lst
make std  = lst.std
make List = lst.List

def _abs  => el { exit el abs }
def toNum => el { exit el num }

def makeStack => el _size { # specific case in which this method is faster / better than lst.fillList
  make arr = el str
  loop _size 1 - { arr += el }
  arr = arr spill pack
  exit toNum( @arr )
}

make symbols = "O" " " "X"
def numToSym => n { exit symbols[ n 1 + ] " | " str }
replace removeLastBar with spill drop drop "&new" str

def printBoard { 
  make arr = numToSym( @board )
  loop 3 with y {
    make ID = y 3 * 2 +
    arr[ ID ] = arr[ ID ] removeLastBar
  }
  print arr spill str
}

# CREATE GAME COMPONENTS
make board = makeStack( 0 9 )
make available = List.newRange( 0 1 8 )

# FIRST-ITERATION-ONLY THINGS:
print "Welcome to tic-tac-toe in GLide!&newFirst, let's see who goes first..."
make PgoesFirst = 0 1 rand pop
print std.?( PgoesFirst "Player" "Bot" ) " goes first!" str

# GAME LOOP
loop 9 with turn {
  # MAKE MOVE
  make move = 9
  make pos
  when turn PgoesFirst + 2 % { # Player's turn
    when move dup 8 > swap 0 < or loop {
      print "Make a move! (0-8)"
      move = inp
      pos = available.getPos( move )
      when pos -1 == { move = 9 }
    }
    board[ move ] = 1
  } else { # Bot's turn
    print "Bot is deciding.."
    move = available.random( )
    pos  = available.getPos( move )
    board[ move ] = -1
  }
  
  # RENDER, we put it here so that when someone wins the board is shown anyways
  print "The move " move " was made" str
  printBoard( )
  
  # CHECK IF WIN
  make rows = 0 0 0
  make cols = 0 0 0
  make diag = 0 0
  
  loop 9 with i {
    rows[ i 3 // ] += board[ i ]
    cols[ i 3 %  ] += board[ i ]
    when i 4 % not { diag[ 0 ] += board[ i ] }
    when i dup dup 0 != swap 8 != and swap 2 % not and { diag[ 1 ] += board[ i ] }
  }
  
  rows = rows spill cols spill diag spill pack
  when lst.getPos( _abs( @rows ) 3 ) -1 > {
    print "TRIS! " std.?( turn PgoesFirst + 2 % "Player" "Bot" ) " has won!" str
    exit
  }
  
  # REMOVE MOVE FROM AVAILABLES
  loop available.len( ) pos 1 + - with i {
    make j = i pos +
    available.data[ j ] = available.data[ j 1 + ]
  }
  available.popLast( )
}